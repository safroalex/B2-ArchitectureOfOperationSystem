package com.safroalex.logic;

import java.util.HashMap;
import java.util.Map;

public class Statistics {
    private Map<Integer, Integer> requestsGeneratedBySource = new HashMap<>(); // источник -> количество заявок
    private Map<Integer, Integer> requestsDeniedBySource = new HashMap<>();   // источник -> количество отказов
    private Map<Integer, Double> totalServiceTimeBySource = new HashMap<>();  // источник -> суммарное время обслуживания
    private Map<Integer, Double> totalWaitTimeBySource = new HashMap<>();     // источник -> суммарное время ожидания
    private Map<Integer, Double> totalServiceTimeSquaredBySource = new HashMap<>();  // источник -> сумма квадратов времени обслуживания
    private Map<Integer, Double> totalWaitTimeSquaredBySource = new HashMap<>();     // источник -> сумма квадратов времени ожидания

    private Map<Integer, Double> deviceUsageTime = new HashMap<>();           // прибор -> суммарное время занятости

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append("Statistics:\n");

        sb.append("Requests generated by source:\n");
        for (Map.Entry<Integer, Integer> entry : requestsGeneratedBySource.entrySet()) {
            sb.append("Source ").append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
        }

        sb.append("Requests denied by source:\n");
        for (Map.Entry<Integer, Integer> entry : requestsDeniedBySource.entrySet()) {
            sb.append("Source ").append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
        }

        sb.append("Total service time by source:\n");
        for (Map.Entry<Integer, Double> entry : totalServiceTimeBySource.entrySet()) {
            sb.append("Source ").append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
        }

        return sb.toString();
    }



    // методы для сбора данных

    public void addRequestGenerated(int sourceId) {
        requestsGeneratedBySource.put(sourceId, requestsGeneratedBySource.getOrDefault(sourceId, 0) + 1);
    }

    public void addRequestDenied(int sourceId) {
        requestsDeniedBySource.put(sourceId, requestsDeniedBySource.getOrDefault(sourceId, 0) + 1);
    }

    public void addWaitTime(int sourceId, double waitTime) {
        totalWaitTimeBySource.put(sourceId, totalWaitTimeBySource.getOrDefault(sourceId, 0.0) + waitTime);
    }

    public void addServiceTime(int sourceId, double serviceTime) {
        totalServiceTimeBySource.put(sourceId, totalServiceTimeBySource.getOrDefault(sourceId, 0.0) + serviceTime);
    }

    public void addDeviceUsageTime(int deviceId, double usageTime) {
        deviceUsageTime.put(deviceId, deviceUsageTime.getOrDefault(deviceId, 0.0) + usageTime);
    }

    public void addServiceTimeSquared(int sourceId, double serviceTime) {
        double squaredTime = serviceTime * serviceTime;
        totalServiceTimeSquaredBySource.put(sourceId, totalServiceTimeSquaredBySource.getOrDefault(sourceId, 0.0) + squaredTime);
    }

    public void addWaitTimeSquared(int sourceId, double waitTime) {
        double squaredTime = waitTime * waitTime;
        totalWaitTimeSquaredBySource.put(sourceId, totalWaitTimeSquaredBySource.getOrDefault(sourceId, 0.0) + squaredTime);
    }

    // методы для вычисления метрик

    public int getTotalRequestsGeneratedBySource(int sourceId) {
        return requestsGeneratedBySource.getOrDefault(sourceId, 0);
    }

    public double getDenialProbability(int sourceId) {
        return (double) requestsDeniedBySource.getOrDefault(sourceId, 0) / requestsGeneratedBySource.getOrDefault(sourceId, 1);
    }

    public double getAverageTimeInSystem(int sourceId) {
        int totalRequests = requestsGeneratedBySource.getOrDefault(sourceId, 1);
        return (totalServiceTimeBySource.getOrDefault(sourceId, 0.0) + totalWaitTimeBySource.getOrDefault(sourceId, 0.0)) / totalRequests;
    }

    public double getServiceTimeVariance(int sourceId) {
        int totalRequests = requestsGeneratedBySource.getOrDefault(sourceId, 1);
        double avgServiceTime = totalServiceTimeBySource.getOrDefault(sourceId, 0.0) / totalRequests;
        double avgServiceTimeSquared = totalServiceTimeSquaredBySource.getOrDefault(sourceId, 0.0) / totalRequests;
        return avgServiceTimeSquared - avgServiceTime * avgServiceTime;
    }

    public double getWaitTimeVariance(int sourceId) {
        int totalRequests = requestsGeneratedBySource.getOrDefault(sourceId, 1);
        double avgWaitTime = totalWaitTimeBySource.getOrDefault(sourceId, 0.0) / totalRequests;
        double avgWaitTimeSquared = totalWaitTimeSquaredBySource.getOrDefault(sourceId, 0.0) / totalRequests;
        return avgWaitTimeSquared - avgWaitTime * avgWaitTime;
    }

    public double getDeviceUtilizationCoefficient(int deviceId, double totalSimulationTime) {
        return deviceUsageTime.getOrDefault(deviceId, 0.0) / totalSimulationTime;
    }
}
